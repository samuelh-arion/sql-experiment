[
  {
    "question": "List all the workers in the Engineering department.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me all the active staff members from the Engineering team.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I would like to know the names of all employees in the Engineering department.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the names of all employees in the Engineering sector?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you list all the employees working in the Engineering department?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please provide a list of employees that belong to the Engineering department.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the current employees in Engineering?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you tell me the full names of people in Engineering?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Get me the details of all staff in the Engineering division.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\", \"t1\".\"is_manager\", \"t1\".\"email\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the active employees associated with Engineering?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who is currently employed in the Engineering department?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you fetch the roster for the Engineering department?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Provide me with the employees that are part of Engineering.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you give me a rundown of all Engineering department employees?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the members of the Engineering staff?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List all personnel associated with Engineering.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What active personnel do we have in the Engineering team?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the individuals working under the Engineering department?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I need to see all employees that work in Engineering.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you outline the employees in the Engineering department?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What is the total count of managers currently employed in our organization?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT COUNT(*) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me all the active members of the Engineering section.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('engineering')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Engineering') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you tell me how many active managers we have in the company?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as active_manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many people hold the position of manager in our company right now?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I'd like to know the number of managers working in our firm.",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many employees are classified as managers within the organization?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Could you provide the count of active managers in our workforce?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as active_manager_count FROM employees WHERE is_active = true AND is_manager = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many individuals are working as managers in our company?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT COUNT(*) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please let me know how many managers are currently active in our company.",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_active\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_active\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you find out the total number of active managers in our organization?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_active\", \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_active\", \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT COUNT(*) as total_active_managers FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What is the current number of managers among our staff?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT COUNT(*) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What's the number of managers we have employed at the moment?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many managers are there in our company at this time?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT COUNT(*) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Could you check how many employees are designated as managers?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you tell me which employees are based in New York?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many individuals currently serve as managers in our organization?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT COUNT(*) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please tell me the count of managers that are active in the company.",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_active\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_active\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What's the total number of active managerial positions filled in our organization?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as total_active_managers FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many of our staff members are in management roles?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many distinct managers are employed in the company right now?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(DISTINCT e.id) AS distinct_manager_count \nFROM employees e \nWHERE e.is_manager = true \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you tell me the number of current managers on our team?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I'd like to know the employees who work in New York.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What\u2019s the count of distinct employees who are managers in our company?",
    "original_sql": "SELECT \"t1\".\"is_manager\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"is_manager\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"id\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) GROUP BY \"t1\".\"id\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(DISTINCT id) as manager_count FROM employees WHERE is_manager = true AND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the active employees located in New York?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List the employees that are situated in New York.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What employees are found in New York?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Find out which employees are residing in New York.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which staff members are in New York?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me the employees that have New York as their location.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please provide a list of employees in New York.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the employees that currently work in New York?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you provide the names of employees based in New York?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT full_name FROM employees WHERE LOWER(location) = LOWER('New York') AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Identify the employees located in New York.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I need to know which employees are in New York.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which employees can be found in the New York area?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What is the list of employees that are in New York?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please show the active employees that are in New York.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the individuals working in New York?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you give me details on employees who are in New York?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(location) = LOWER('New York') AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I'd like to see the employees whose location is New York.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who among the employees is located in New York?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you retrieve the employees that are located in New York?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('new york')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('New York') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me all the employees that report to Sarah Johnson.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.* FROM employees e\nJOIN employees AS manager ON e.reports_to = manager.id\nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson')\nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you provide a list of employees under Sarah Johnson's supervision?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (((\"t1\".\"is_active\" AND (\"t1\".\"full_name\" LIKE '%sarah%')) AND (\"t1\".\"full_name\" LIKE '%johnson%')) AND (\"t1\".\"is_manager\" = 1))",
    "sql_agent": "SELECT e.full_name, e.department, e.location \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the employees that have Sarah Johnson as their manager?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.full_name, e.department, e.location \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Find all employees who are accountable to Sarah Johnson.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.* FROM employees e\nJOIN employees AS manager ON e.reports_to = manager.id\nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson')\nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List the staff members reporting to Sarah Johnson.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((((\"t1\".\"is_active\" AND (\"t1\".\"full_name\" LIKE '%sarah%')) AND (\"t1\".\"full_name\" LIKE '%johnson%')) AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.full_name, e.department, e.location \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I need the names of employees that are managed by Sarah Johnson.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.full_name \nFROM employees e \nJOIN employees manager ON e.reports_to = manager.id \nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List out the employees who are under Sarah Johnson's authority.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.full_name, e.department, e.location \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please show all employees that work under Sarah Johnson.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.* FROM employees e\nJOIN employees AS manager ON e.reports_to = manager.id\nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson')\nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Provide me with a list of individuals reporting to Sarah Johnson.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.full_name, e.email FROM employees e\nJOIN employees AS manager ON e.reports_to = manager.id\nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson')\nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Identify the employees who report directly to Sarah Johnson.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.full_name, e.id \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you give me the details of employees that report to Sarah Johnson?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\", \"t1\".\"email\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.* FROM employees e\nJOIN employees manager ON e.reports_to = manager.id\nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson')\nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which employees report to Sarah Johnson?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((((\"t1\".\"is_active\" AND (\"t1\".\"full_name\" LIKE '%sarah%')) AND (\"t1\".\"full_name\" LIKE '%johnson%')) AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.full_name FROM employees e\nJOIN employees manager ON e.reports_to = manager.id\nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson')\nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Gather the information of employees managed by Sarah Johnson.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\", \"t1\".\"email\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.* FROM employees e\nJOIN employees AS manager ON e.reports_to = manager.id\nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson')\nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you retrieve the list of employees under the supervision of Sarah Johnson?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((((\"t1\".\"is_active\" AND (\"t1\".\"full_name\" LIKE '%sarah%')) AND (\"t1\".\"full_name\" LIKE '%johnson%')) AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.full_name, e.department, e.location \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show all employees that have Sarah Johnson as their reporting manager.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.* FROM employees e\nJOIN employees AS manager ON e.reports_to = manager.id\nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson')\nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List all staff that reports to Sarah Johnson.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.full_name FROM employees e\nJOIN employees AS manager ON e.reports_to = manager.id\nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson')\nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the team members reporting to Sarah Johnson?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((((\"t1\".\"is_active\" AND (\"t1\".\"full_name\" LIKE '%sarah%')) AND (\"t1\".\"full_name\" LIKE '%johnson%')) AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.full_name, e.department, e.location \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the names of the employees that Sarah Johnson oversees?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (((\"t1\".\"is_active\" AND (\"t1\".\"full_name\" LIKE '%sarah%')) AND (\"t1\".\"full_name\" LIKE '%johnson%')) AND (\"t1\".\"is_manager\" = 1))",
    "sql_agent": "SELECT e.full_name \nFROM employees e \nJOIN employees manager ON e.reports_to = manager.id \nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Identify all employees associated with Sarah Johnson as their manager.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.full_name, e.department, e.location \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What is the list of employees who report to Sarah Johnson?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((((\"t1\".\"is_active\" AND (\"t1\".\"full_name\" LIKE '%sarah%')) AND (\"t1\".\"full_name\" LIKE '%johnson%')) AND (\"t2\".\"full_name\" LIKE '%sarah%')) AND (\"t2\".\"full_name\" LIKE '%johnson%'))",
    "sql_agent": "SELECT e.full_name \nFROM employees e \nJOIN employees manager ON e.reports_to = manager.id \nWHERE LOWER(manager.full_name) = LOWER('Sarah Johnson') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you tell me who is celebrating their birthday next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = '11') \nAND is_active = true \nORDER BY strftime('%d', birth_date);",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show me the names of those whose birthdays are in the following month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 31))))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month'))) \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which employees have birthdays in the upcoming month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 31))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) \nOR (strftime('%m', birth_date) = '12' AND strftime('%d', birth_date) >= '15') \nOR (strftime('%m', birth_date) = '01' AND strftime('%d', birth_date) <= '15')) \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List the people who have birthdays coming up in the next 30 days.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-29')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-29'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-29')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+1 month'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now')) AND strftime('%d', birth_date) >= strftime('%d', date('now'))) \nAND is_active = true \nORDER BY birth_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the employees with birthdays in the next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 31))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE is_active = true \nAND ((strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) AND strftime('%d', birth_date) >= strftime('%d', date('now'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+2 month')) AND strftime('%d', birth_date) < strftime('%d', date('now')))) \nORDER BY birth_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Is there anyone whose birthday is approaching next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE is_active = true \nAND ((strftime('%m', birth_date) = '11' AND strftime('%d', birth_date) >= '1') OR (strftime('%m', birth_date) = '12' AND strftime('%d', birth_date) <= '31')) \nORDER BY birth_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Identify the staff members with birthdays in the month ahead.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 31))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) \nOR (strftime('%m', birth_date) = '12' AND strftime('%d', birth_date) >= '1') \nOR (strftime('%m', birth_date) = '01' AND strftime('%d', birth_date) <= '31')) \nAND is_active = true \nORDER BY strftime('%d', birth_date);",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who will celebrate their birthday in the next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE is_active = true \nAND ((strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) AND strftime('%d', birth_date) >= strftime('%d', 'now')) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) AND strftime('%d', birth_date) < strftime('%d', 'now', '+1 month')) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month', '+1 month')) AND strftime('%d', birth_date) < strftime('%d', 'now')))\nORDER BY birth_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Whose birthdays fall within the next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 31))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE is_active = true \nAND ((strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) AND strftime('%d', birth_date) >= strftime('%d', date('now'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) AND strftime('%d', birth_date) < strftime('%d', date('now', '+1 month')))) \nORDER BY strftime('%m', birth_date), strftime('%d', birth_date);",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who has their birthday occurring in the next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 31))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE is_active = true \nAND ((strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) AND strftime('%d', birth_date) >= strftime('%d', date('now'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month'), '+1 month') AND strftime('%d', birth_date) <= '15')) \nORDER BY birth_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you find out which employees have upcoming birthdays?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE is_active = true \nAND ((strftime('%m', birth_date) = strftime('%m', date('now')) AND strftime('%d', birth_date) >= strftime('%d', date('now'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+1 month')))) \nORDER BY strftime('%m', birth_date), strftime('%d', birth_date);",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the individuals that will celebrate their birthday in the upcoming month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = '11' AND strftime('%d', birth_date) >= '1') OR (strftime('%m', birth_date) = '12' AND strftime('%d', birth_date) <= '31') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you provide the names of those with birthdays next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 31))))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE (strftime('%m', birth_date) = '11') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Give me a list of employees who will have a birthday next month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 31))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = '11' AND strftime('%d', birth_date) >= '1') OR (strftime('%m', birth_date) = '12' AND strftime('%d', birth_date) <= '31')\nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What employees are having birthdays in the forthcoming month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 31))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) \nOR (strftime('%m', birth_date) = '12' AND strftime('%d', birth_date) >= '15' AND strftime('%m', date('now')) = '01')) \nOR (strftime('%m', birth_date) = '01' AND strftime('%d', birth_date) <= '15' AND strftime('%m', date('now')) = '12')) \nAND is_active = true \nORDER BY strftime('%d', birth_date);",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is due to celebrate their birthday in the next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = '11' AND strftime('%d', birth_date) >= '1') OR (strftime('%m', birth_date) = '12' AND strftime('%d', birth_date) <= '31') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which employees\u2019 birthdays are happening next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 31))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = '11' AND strftime('%d', birth_date) >= '1') OR (strftime('%m', birth_date) = '12' AND strftime('%d', birth_date) <= '31')\nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who has a birthday in the month ahead?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) \nOR (strftime('%m', birth_date) = strftime('%m', date('now')) \nAND strftime('%d', birth_date) >= strftime('%d', date('now')))) \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the employees working with the Marketing client?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you tell me the names of employees linked to the Marketing client?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT full_name FROM employees WHERE LOWER(client) = LOWER('Marketing') AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you check and see who has an upcoming birthday?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE is_active = true \nAND ((strftime('%m', birth_date) = strftime('%m', date('now')) AND strftime('%d', birth_date) >= strftime('%d', date('now'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) AND strftime('%d', birth_date) <= '15')) \nORDER BY birth_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which staff members celebrate their birthdays next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 31))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = '11') \nAND (strftime('%d', birth_date) >= '1' AND strftime('%d', birth_date) <= '31') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List employees with birthdays occurring in the next month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 31))))",
    "sql_agent": "SELECT * FROM employees \nWHERE ((strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) AND strftime('%d', birth_date) >= strftime('%d', date('now')))\nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+2 month')) AND strftime('%d', birth_date) <= strftime('%d', date('now'))))\nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List all active employees assigned to the Marketing client.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which active staff members are associated with the Marketing client?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me the full names of employees that are part of the Marketing client.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Identify the employees currently assigned to the Marketing client.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the names of employees that deal with the Marketing client?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who is currently assigned to the Marketing client among the employees?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Find the active employees who are working on the Marketing client.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which employees are currently engaged with the Marketing client?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the active employees involved with the Marketing client?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the full names of employees tied to the Marketing client?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Could you provide a list of employees that serve the Marketing client?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please give me the names of those employees in connection with the Marketing client.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List employees that are active and assigned to the Marketing client.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you name the employees working for the Marketing client?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which employees are currently active and working with the Marketing client?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who is on the team for the Marketing client among the employees?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me the employees that are connected to the Marketing client.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Identify the active workforce associated with the Marketing client.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('marketing')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Marketing') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you tell me the number of active employees in each department?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What is the total count of employees in every department?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Could you provide the employee count grouped by department?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many active staff members are there in each department?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS active_staff_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY active_staff_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please list the number of employees per department.",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me the count of employees in each department, sorted by total.",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the totals of employees sorted by department?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many people do we have working in each department?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What is the breakdown of employees across the various departments?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "{'error': 'Invalid query'}",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you give me the total number of employees for each department?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many employees exist in each department, specifically active ones?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I'd like to see the number of employees categorized by department.",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What is the employee headcount for each department?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you break down the number of employees in each department?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List the count of distinct employees by department, sorted in descending order.",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(DISTINCT id) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What\u2019s the total number of active employees in each department?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What\u2019s the tally of employees per department?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Provide a summary of employee counts for each department.",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you list the employees currently working in the Sales department?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many employees are there in each department, active only?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you summarize the number of employees in each department for me?",
    "original_sql": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY LOWER(department) \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me the active staff members in the Sales division.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I need to know who is active in the Sales department.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please provide the names of active employees in Sales.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT full_name FROM employees WHERE LOWER(department) = LOWER('Sales') AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the names of the active employees within the Sales team?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the employees who are active in the Sales sector?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who is currently employed in Sales and marked as active?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you tell me which employees are active in the Sales area?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Fetch the list of active workers in the Sales department.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which individuals are currently active in the Sales department?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Could you give me the names of those active in Sales?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List the names of active individuals in the Sales department.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List all the employees in Sales who are currently active.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please tell me the active employees working in Sales.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Identify the active members of the Sales department.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who in the Sales department is still employed and active?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the personnel in the Sales department that are still active?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the names of employees who manage in the Finance division?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE is_manager = true \nAND LOWER(department) = LOWER('Finance') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Retrieve all employees that hold a managerial position in the Finance sector.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Finance') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What active employees are part of the Sales team?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me all employees who are managers in the Finance department.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Finance') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you provide a list of all managers working in Finance?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Finance') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Name the employees who work in Sales and are currently active.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List all individuals who are both managers and part of the Finance team.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE is_manager = true \nAND LOWER(department) = LOWER('Finance') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can I see a list of managers from the Finance department?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE LOWER(department) = LOWER('Finance') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the current active employees in the Sales division?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('sales')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Sales') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show the names of all employees who manage in Finance.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT e.full_name \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE manager.is_manager = true \nAND LOWER(manager.department) = LOWER('Finance') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Find all employees that are managing in the Finance department.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE is_manager = true \nAND LOWER(department) = LOWER('Finance') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the managers in the Finance department?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT e.full_name, e.department \nFROM employees e \nWHERE e.is_manager = true \nAND LOWER(e.department) = LOWER('Finance') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Identify all employees that are managers in Finance.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE is_manager = true \nAND LOWER(department) = LOWER('Finance') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Get me the employees classified as managers within the Finance department.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Finance') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please list all Finance managers.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Finance') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Provide the details of all Finance department managers.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Finance') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List out all those who are managers in the Finance department.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Finance') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What employees are both active and managing in the Finance department?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE is_active = true \nAND is_manager = true \nAND LOWER(department) = LOWER('Finance');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please show all employees in Finance that manage others.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT e.full_name, e.department, e.location \nFROM employees e \nWHERE LOWER(e.department) = LOWER('Finance') \nAND e.is_manager = true \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List the active Finance employees who are also managers.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Finance') \nAND is_active = true \nAND is_manager = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Get a list of all active managers in the Finance division.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\", \"t1\".\"department\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Finance') \nAND is_active = true \nAND is_manager = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the employees that are managers in the Finance area?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Finance') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which employees hold managerial roles in the Finance department?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('finance')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('Finance') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you provide a list of employees who work remotely?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('Remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me all active employees that are working from remote locations.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"location\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the employees located in remote areas?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which employees are currently working from remote sites?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I need the names of employees based in remote locations.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT full_name FROM employees WHERE LOWER(location) = LOWER('remote') AND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List the employees whose work location is remote.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Tell me about the employees that are stationed in remote locations.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Find the active employees that are based remotely.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the names of employees whose work location is remote?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT full_name FROM employees WHERE LOWER(location) = LOWER('remote') AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you list the employees that are located remotely?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please show me the employees that are situated in remote locations.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Are there any employees whose location is remote?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which employees operate from a remote location?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List all employees who are remote.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me the list of remote employees.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the employees with birthdays in the months of April, May, or June?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT * FROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What employees are currently located in remote areas?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Find employees that have birthdays during the time frame of April to June.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT * FROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show me the employees whose birthdays are in the second quarter of the year.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT * FROM employees \nWHERE (strftime('%m', birth_date) = '04' AND strftime('%d', birth_date) >= '01') \n   OR (strftime('%m', birth_date) = '05') \n   OR (strftime('%m', birth_date) = '06' AND strftime('%d', birth_date) <= '30') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Identify employees working in remote settings.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you gather the names of employees who are remote workers?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT full_name FROM employees WHERE LOWER(location) = LOWER('remote') AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the active employees with remote work locations?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('remote') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which employees have their birthdays occurring in the April to June period?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true \nORDER BY strftime('%m', birth_date), strftime('%d', birth_date);",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List the names and birth dates of all employees whose birthdays fall between April and June.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT full_name, birth_date FROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What are the birthdays of employees that occur between April and June?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true \nORDER BY birth_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who works in a remote capacity among the employees?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('remote')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(location) = LOWER('remote') AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I need the names and birth dates of employees born in April, May, or June.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\"",
    "sql_agent": "SELECT full_name, birth_date FROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which active employees have their birthdays in the months of April, May, or June?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT * FROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you provide me with the list of employees born between April and June?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT * FROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Identify employees with birthdays that are in the April to June range.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT * FROM employees \nWHERE (strftime('%m', birth_date) = '04' AND strftime('%d', birth_date) >= '01') \n   OR (strftime('%m', birth_date) = '05') \n   OR (strftime('%m', birth_date) = '06' AND strftime('%d', birth_date) <= '30') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you tell me which employees celebrate their birthdays from April through June?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Retrieve the employees who were born in the months from April to June.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\"",
    "sql_agent": "SELECT * FROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who has their birthday in the months of April through June among the employees?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) BETWEEN '04' AND '06') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you find the employees whose birthdays fall within April, May, or June?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT * FROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List employees who were born in the April to June window.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT * FROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please identify employees that celebrate their birthdays in April, May, or June.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT * FROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which employees have birth dates that are during the months of April, May, or June?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT * FROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you tell me the number of active employees assigned to each client?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Could you provide the number of distinct employees for every client?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": null,
    "sql_agent": "SELECT client, COUNT(DISTINCT id) AS employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": "Pydantic agent error: Could not parse response content as the length limit was reached - CompletionUsage(completion_tokens=18, prompt_tokens=1992, total_tokens=2010, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=1920))"
  },
  {
    "question": "What is the total count of employees per client?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please show all employees with birthdays in either April, May, or June.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT * FROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many active workers do we have for each client?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as active_worker_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY active_worker_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List the clients along with the count of their assigned employees.",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Gather the names and birth dates of employees with birthdays in the April to June timeframe.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT full_name, birth_date FROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "I\u2019d like to know which employees celebrate their birthdays between April and June.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 4) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 4) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 6) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 6) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 30))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = '04' OR strftime('%m', birth_date) = '05' OR strftime('%m', birth_date) = '06') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What is the employee tally for each client?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me the total number of employees assigned to each client.",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many employees are currently working for each client?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What\u2019s the count of employees linked to each client?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I'd like to know how many employees are linked to each client, please.",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you give me a breakdown of employees per client?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What\u2019s the employee count by client?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many distinct workers are there for each client?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(DISTINCT id) AS distinct_workers_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY distinct_workers_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "For each client, how many active employees are there?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as active_employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY active_employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you summarize the number of employees for each client?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Tell me the number of employees associated with each client.",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which clients have how many active employees?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as active_employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY active_employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you provide a list of managers within the HR department?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE is_manager = true \nAND LOWER(department) = LOWER('HR') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What is the distribution of active employees among clients?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me all employees working in the HR department who hold managerial positions.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('HR') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many employees does each client have assigned?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Find all active employees in HR who are also designated as managers.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"is_manager\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('HR') \nAND is_active = true \nAND is_manager = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many employees are working with each client?",
    "original_sql": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"client\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"client\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT client, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY client \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I need the names of all HR department staff who are managers.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE LOWER(department) = LOWER('HR') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List the employees from HR who are classified as managers.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('HR') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the managers that belong to the HR team?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT e.full_name, e.department \nFROM employees e \nWHERE e.is_manager = true \nAND LOWER(e.department) = LOWER('HR') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you identify all the HR department employees that are managers?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('HR') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please display all active HR staff members that are also in management roles.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('HR') \nAND is_active = true \nAND is_manager = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List out the managers in the HR department, please.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT e.full_name, e.department \nFROM employees e \nWHERE e.is_manager = true \nAND LOWER(e.department) = LOWER('HR') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which employees in HR are currently holding managerial roles?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('HR') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Retrieve the details of employees in the HR department that are managers.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('HR') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Give me the list of all HR employees who also serve as managers.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('HR') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me the HR employees who are managing others.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT e1.full_name, e1.department, e1.location \nFROM employees e1 \nJOIN employees e2 ON e1.id = e2.reports_to \nWHERE e1.is_manager = true \nAND LOWER(e1.department) = LOWER('HR') \nAND e1.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the current managers in the HR department?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT full_name FROM employees WHERE LOWER(department) = LOWER('HR') AND is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you enumerate the employees in HR that are also managers?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('HR') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please list all employees in the HR department that have manager status.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('HR') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Find the HR employees with a managerial title.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('HR') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I want to see all HR managers.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('HR') \nAND is_manager = true \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the names of the HR managers?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT full_name FROM employees WHERE LOWER(department) = LOWER('HR') AND is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you tell me who the managers are in the HR department?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT full_name FROM employees WHERE LOWER(department) = LOWER('HR') AND is_manager = true AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me the active managers working in HR.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"is_manager\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('hr')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(department) = LOWER('HR') \nAND is_active = true \nAND is_manager = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List the employees based in London.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('London') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you tell me who works at the London office?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('London') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me the names of our London office employees.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT full_name FROM employees WHERE LOWER(location) = LOWER('London') AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the active staff members located in London?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('London') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which employees are currently in the London location?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('London') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the people employed in our London office?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('London') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Provide the details of our employees at the London branch.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('London') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who is part of the team in our London office?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(location) = LOWER('London') AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Give me a list of all active employees in London.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(location) = LOWER('London') AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you show me the employees that are in the London office?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('London') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Identify the active employees working in London.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('London') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the names of employees located in London?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT full_name FROM employees WHERE LOWER(location) = LOWER('London') AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can I see the roster of our London office staff?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('London') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you provide names of those working in the London office?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT full_name FROM employees WHERE LOWER(location) = LOWER('London') AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who is currently working at the London office?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(location) = LOWER('London') AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me the list of active employees at the London location.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"location\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('London') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which employees are stationed in London right now?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('London') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What employees do we have at our office in London?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('London') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the individuals employed in the London office?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(location) = LOWER('London') AND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the employees that have managers in the Operations department?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name, m.full_name AS manager_name \nFROM employees e \nJOIN employees m ON e.reports_to = m.id \nWHERE m.is_active = true \nAND LOWER(m.department) = LOWER('Operations') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the personnel at our London office?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(location) = LOWER('London') AND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List out the active staff members in the London location.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"location\") IN ('london')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(location) = LOWER('London') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Identify the employees under the supervision of managers in the Operations division.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name, e.department, manager.full_name AS manager_name \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE LOWER(manager.department) = LOWER('Operations') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you list the active employees that report to managers working in Operations?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "Here is the SQL query to list the active employees that report to managers working in Operations:\n\n```sql\nSELECT e.full_name, e.department, e.location \nFROM employees e \nJOIN employees m ON e.reports_to = m.id \nWHERE m.department = 'Operations' \nAND e.is_active = true;\n```\n\nThis query retrieves the names, departments, and locations of active employees who report to managers in the Operations department. \n\nIf you need the results of this query executed, please let me know!",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which active employees are overseen by managers from the Operations team?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name, m.full_name AS manager_name \nFROM employees e \nJOIN employees m ON e.reports_to = m.id \nWHERE e.is_active = true \nAND LOWER(m.department) = LOWER('Operations');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the names of employees reporting to Operations managers?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name \nFROM employees e \nJOIN employees manager ON e.reports_to = manager.id \nWHERE manager.department = 'Operations' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please provide a list of employees who report to an Operations department manager.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name, e.department \nFROM employees e \nJOIN employees manager ON e.reports_to = manager.id \nWHERE manager.department = 'Operations' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who works under managers in the Operations sector?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name, e.department, manager.full_name AS manager_name \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE LOWER(e.department) = LOWER('Operations') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show me the employees that are managed by someone in the Operations department.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\"",
    "sql_agent": "SELECT e.* FROM employees e\nJOIN employees manager ON e.reports_to = manager.id\nWHERE LOWER(manager.department) = LOWER('Operations')\nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Find the employees that are linked to managers in the Operations area.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name, m.full_name AS manager_name \nFROM employees e \nJOIN employees m ON e.reports_to = m.id \nWHERE LOWER(m.department) = LOWER('Operations') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List all employees that report to a manager in the Operations department.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name, e.department, manager.full_name AS manager_name \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE LOWER(manager.department) = LOWER('Operations') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you tell me which employees are directed by Operations managers?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE (((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 0)) AND (\"t2\".\"full_name\" LIKE '%operations%')) AND (\"t2\".\"full_name\" LIKE '%manager%'))",
    "sql_agent": "SELECT e.full_name, manager.full_name AS manager_name \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE manager.is_manager = true \nAND LOWER(manager.department) = LOWER('Operations') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Identify all the employees that have a reporting relationship with Operations department managers.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name, e.department, manager.full_name AS manager_name \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE manager.department = 'Operations' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What employees are currently reporting to managers in the Operations field?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name, m.full_name AS manager_name \nFROM employees e \nJOIN employees m ON e.reports_to = m.id \nWHERE LOWER(m.department) = LOWER('Operations') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show me the names of employees working under Operations managers.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name \nFROM employees e \nJOIN employees manager ON e.reports_to = manager.id \nWHERE manager.is_manager = true \nAND e.is_active = true \nAND LOWER(manager.department) = LOWER('Operations');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which employees are currently active and report to an Operations manager?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" AND (\"t2\".\"full_name\" LIKE '%operations%')) AND (\"t2\".\"full_name\" LIKE '%manager%'))",
    "sql_agent": "SELECT e.* FROM employees e\nJOIN employees manager ON e.reports_to = manager.id\nWHERE e.is_active = true\nAND LOWER(manager.department) = LOWER('Operations')",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the staff members under the management of the Operations department?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name, e.department, manager.full_name AS manager_name \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE LOWER(manager.department) = LOWER('Operations') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please identify employees that report up to managers in the Operations department.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name, m.full_name AS manager_name \nFROM employees e \nJOIN employees m ON e.reports_to = m.id \nWHERE m.is_manager = true \nAND LOWER(m.department) = LOWER('Operations') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the individuals employed in the Operations department who report to managers?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name, e.department, manager.full_name AS manager_name \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE LOWER(e.department) = LOWER('Operations') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you give me a list of employees reporting to managers in the Operations area?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name, manager.full_name AS manager_name \nFROM employees e \nJOIN employees AS manager ON e.reports_to = manager.id \nWHERE LOWER(manager.department) = LOWER('Operations') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What employees report to those classified as managers in the Operations division?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.full_name, e.department, e.location \nFROM employees e \nJOIN employees m ON e.reports_to = m.id \nWHERE m.is_manager = true \nAND LOWER(m.department) = LOWER('Operations') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List those employees who have managers in the Operations department.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\" FROM \"employees\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"reports_to_id\" = \"t2\".\"id\") WHERE ((\"t1\".\"is_active\" = 1) AND (\"t2\".\"is_manager\" = 1) AND (LOWER(\"t2\".\"department\") IN ('operations')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_manager\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND (\"t1\".\"is_manager\" = 1)) AND (LOWER(\"t1\".\"department\") IN ('operations')))",
    "sql_agent": "SELECT e.* FROM employees e\nJOIN employees manager ON e.reports_to = manager.id\nWHERE LOWER(manager.department) = LOWER('Operations')\nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you tell me who has a birthday coming up next week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE is_active = true \nAND ((strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) >= strftime('%d', date('now')))\nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+7 days')))\nOR (strftime('%m', birth_date) = strftime('%m', date('now')) AND strftime('%d', birth_date) >= strftime('%d', date('now')))) \nORDER BY birth_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which employees are having birthdays next week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) BETWEEN strftime('%d', date('now')) AND strftime('%d', date('now', '+7 days'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+7 days'))) \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List the employees with birthdays in the upcoming week.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 1)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 7))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE is_active = true \nAND ((strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) >= strftime('%d', date('now')))\nOR (strftime('%m', birth_date) = strftime('%m', date('now')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+7 days')))) \nORDER BY birth_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who among the staff has a birthday during next week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-02') AND (date(\"t1\".\"start_date\") <= '2025-03-08')) OR ((date(\"t1\".\"end_date\") >= '2025-03-02') AND (date(\"t1\".\"end_date\") <= '2025-03-08'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-02') AND (date(\"t1\".\"end_date\") >= '2025-03-08')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) BETWEEN strftime('%d', date('now')) AND strftime('%d', date('now', '+7 days'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+8 days')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+8 days'))) \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who will be celebrating their birthday next week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE is_active = true \nAND ((strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) >= strftime('%d', date('now', '+7 days'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+8 days')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+8 days')))) \nORDER BY birth_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the employees whose birthdays are next week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 6)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 12))))",
    "sql_agent": "SELECT * FROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) >= strftime('%d', date('now', '+7 days'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+8 days')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+8 days'))) \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which employees will turn a year older next week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+1 week')) AND strftime('%d', birth_date) = strftime('%d', date('now', '+1 week'))) \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please provide the names of those with birthdays next week.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name \nFROM employees \nWHERE (strftime('%m', birth_date) = '10' AND strftime('%d', birth_date) BETWEEN '01' AND '07') \n   OR (strftime('%m', birth_date) = '11' AND strftime('%d', birth_date) BETWEEN '01' AND '07') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is going to celebrate their birthday in the week ahead?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-07')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-07'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-07')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE is_active = true \nAND ((strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) BETWEEN strftime('%d', date('now')) AND strftime('%d', date('now', '+7 days'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now')) AND strftime('%d', birth_date) >= strftime('%d', date('now')))) \nORDER BY birth_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Identify the individuals with birthdays in the next week.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 6)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 12))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) >= strftime('%d', date('now')))\n   OR (strftime('%m', birth_date) = strftime('%m', date('now')) AND strftime('%d', birth_date) < strftime('%d', date('now', '+7 days')))\nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show me the people whose birthdays fall next week.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"birth_date\" FROM \"employees\" AS \"t1\" WHERE ((\"t1\".\"is_active\" AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') > 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') >= 6)))) AND ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') < 3) OR ((CAST(strftime('%m', \"t1\".\"birth_date\"), 'INTEGER') = 3) AND (CAST(strftime('%d', \"t1\".\"birth_date\"), 'INTEGER') <= 12))))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) BETWEEN strftime('%d', date('now')) AND strftime('%d', date('now', '+7 days'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+7 days'))) \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you check who has a birthday next week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) BETWEEN strftime('%d', date('now')) AND strftime('%d', date('now', '+7 days'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+8 days')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+8 days'))) \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who has an upcoming birthday in the next week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE is_active = true \nAND ((strftime('%m', birth_date) = strftime('%m', date('now', '+1 week')) AND strftime('%d', birth_date) >= strftime('%d', date('now')))\nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+1 week')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+1 week')))\nOR (strftime('%m', birth_date) = strftime('%m', date('now')) AND strftime('%d', birth_date) >= strftime('%d', date('now')))) \nORDER BY birth_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List out the employees with birthdays next week.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT * FROM employees \nWHERE (strftime('%m', birth_date) = '10' AND strftime('%d', birth_date) BETWEEN '01' AND '07') \n   OR (strftime('%m', birth_date) = '11' AND strftime('%d', birth_date) = '01') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which staff members are having their birthdays next week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+1 week')) AND strftime('%d', birth_date) >= strftime('%d', date('now', '+1 week')))\nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+2 week')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+1 week')))\nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who has a birthday celebration next week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+1 week')) AND strftime('%d', birth_date) BETWEEN strftime('%d', date('now')) AND strftime('%d', date('now', '+7 days'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+7 days'))) \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Tell me the names of the employees with birthdays next week.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name FROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) BETWEEN strftime('%d', date('now')) AND strftime('%d', date('now', '+7 days'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+1 month')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+7 days'))) \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Find out who is celebrating their birthday next week.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": null,
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) >= strftime('%d', date('now', '+7 days'))) \n   OR (strftime('%m', birth_date) = strftime('%m', date('now', '+8 days')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+8 days'))) \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": "Pydantic agent error: Could not parse response content as the length limit was reached - CompletionUsage(completion_tokens=1000, prompt_tokens=1990, total_tokens=2990, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=1920))"
  },
  {
    "question": "What is the count of active employees at each location?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the names of those whose birthdays are next week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) >= strftime('%d', date('now', '+7 days'))) \n   OR (strftime('%m', birth_date) = strftime('%m', date('now', '+8 days')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+8 days'))) \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "How many active staff members are there per location?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as active_staff_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY active_staff_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you provide the number of employees for each location?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List the total number of employees by location.",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can we see the list of employees with birthdays next week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE (strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) BETWEEN strftime('%d', date('now', '+7 days')) AND strftime('%d', date('now', '+13 days'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+8 days')) AND strftime('%d', birth_date) <= strftime('%d', date('now', '+13 days'))) \nAND is_active = true \nORDER BY birth_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show me how many employees we have in each site.",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What is the employee distribution across different locations?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "{'error': 'Invalid query'}",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many employees are assigned to each location?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you tell me the number of employees located at each site?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the totals of active employees grouped by location?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which individuals will celebrate their birthdays next week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-06') AND (date(\"t1\".\"start_date\") <= '2025-03-12')) OR ((date(\"t1\".\"end_date\") >= '2025-03-06') AND (date(\"t1\".\"end_date\") <= '2025-03-12'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-06') AND (date(\"t1\".\"end_date\") >= '2025-03-12')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT full_name, birth_date \nFROM employees \nWHERE is_active = true \nAND ((strftime('%m', birth_date) = strftime('%m', date('now', '+7 days')) AND strftime('%d', birth_date) >= strftime('%d', date('now', '+7 days'))) \nOR (strftime('%m', birth_date) = strftime('%m', date('now', '+8 days')))) \nORDER BY birth_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What\u2019s the active employee count for each location?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT location, COUNT(*) as active_employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY active_employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you break down the number of employees by location?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many people work at each location?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Give me the total number of active employees at every location.",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as total_active_employees \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY total_active_employees DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many workers do we have at each location?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What\u2019s the employee headcount per location?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Tell me the count of distinct employees across locations.",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT location, COUNT(DISTINCT id) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Could you list the number of employees per location?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many distinct active employees are there in each location?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(DISTINCT id) as active_employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY active_employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What is the total number of employees per site?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What\u2019s the tally of employees in each location?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you provide the names and details of employees that work for Apollo?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\", \"t1\".\"email\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(client) = LOWER('Apollo') AND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me all active employees associated with the Apollo client.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Apollo') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "How many employees do we have at each office location?",
    "original_sql": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"location\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"employees\" AS \"t1\" WHERE \"t1\".\"is_active\" GROUP BY \"t1\".\"location\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT location, COUNT(*) as employee_count \nFROM employees \nWHERE is_active = true \nGROUP BY location \nORDER BY employee_count DESC;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I want to see the full names, departments, and locations of employees linked to the Apollo client.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT full_name, department, location FROM employees \nWHERE LOWER(client) = LOWER('Apollo') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List the active staff members who are working for the client Apollo.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Apollo') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please display all members of the workforce who are active and serve Apollo.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(client) = LOWER('Apollo') AND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Find all employees that are connected to the Apollo client.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Apollo') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Retrieve the details of employees working with Apollo.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(client) = LOWER('Apollo') AND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the names and departments of employees that work for the Apollo client?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT full_name, department FROM employees WHERE LOWER(client) = LOWER('Apollo') AND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "I need to know which employees are currently assigned to Apollo.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(client) = LOWER('Apollo') AND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you give me a list of employees who are actively working for Apollo?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"full_name\" LIKE '%apollo%'))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(client) = LOWER('Apollo') AND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List the employees under Apollo who are still active.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"full_name\" LIKE '%apollo%'))",
    "sql_agent": "SELECT e.full_name \nFROM employees e \nJOIN employees manager ON e.reports_to = manager.id \nWHERE LOWER(manager.full_name) = LOWER('Apollo') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show all employees who have Apollo as their client right now.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"updated_at\", \"t1\".\"full_name\", \"t1\".\"nationality\", \"t1\".\"department\", \"t1\".\"is_manager\", \"t1\".\"location\", \"t1\".\"linkedin\", \"t1\".\"twitter_x\", \"t1\".\"facebook\", \"t1\".\"email\", \"t1\".\"is_active\", \"t1\".\"reports_to_id\", \"t1\".\"birth_date\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Apollo') \nAND is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the employees currently assigned to the Apollo account?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(client) = LOWER('Apollo') AND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Provide me with the active employee roster for those working with Apollo.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Apollo') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What active employees are working for the Apollo client?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"client\", \"t1\".\"is_active\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Apollo') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please list the active employees that belong to the Apollo project.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(client) = LOWER('Apollo') AND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the current employees that serve the Apollo client?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Apollo') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the active employees in the Apollo client department?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"department\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"department\") IN ('apollo client')))",
    "sql_agent": "SELECT * FROM employees \nWHERE LOWER(client) = LOWER('Apollo') \nAND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Give me the names of all employees currently working for Apollo.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (\"t1\".\"full_name\" LIKE '%apollo%'))",
    "sql_agent": "SELECT full_name FROM employees WHERE LOWER(client) = LOWER('Apollo') AND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you find all employees linked to Apollo who are currently active?",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(client) = LOWER('Apollo') AND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List all the active staff members associated with Apollo.",
    "original_sql": "SELECT \"t1\".\"full_name\", \"t1\".\"department\", \"t1\".\"location\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", \"t1\".\"is_active\", \"t1\".\"client\" FROM \"employees\" AS \"t1\" WHERE (\"t1\".\"is_active\" AND (LOWER(\"t1\".\"client\") IN ('apollo')))",
    "sql_agent": "SELECT * FROM employees WHERE LOWER(client) = LOWER('Apollo') AND is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I would like to know who is currently away from the office.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the employees that are on leave at this moment?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is not in the office today?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all absences%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please provide a list of individuals who are currently out of the office.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you find out which staff members are on time off right now?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date, t.policy_type \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the people that are currently taking time off?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "I'd like to see the names of employees who are out of the office at this time.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now'))))",
    "sql_agent": "SELECT e.full_name \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What employees have active leave today?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%active leave%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date, t.policy_type \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which team members are currently unavailable due to time off?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you tell me which employees are out of the office right now?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you check who is on leave at the moment?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date, t.policy_type \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List the employees who are out of the office today.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is currently away from work?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is taking a leave of absence right now?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave of absence%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I'd like to know which employees are currently on vacation or leave.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.policy_type, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is currently absent from the office?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all absences%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is not available in the office at this time?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%any time off%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please let me know who is away on leave right now.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date, t.policy_type \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you show me the employees that are out of the office today?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who is currently enjoying their time off?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the employees currently taking vacation this week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now', '+7 days') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you list the staff members who are on vacation this week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now', '+7 days') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which employees have vacation time scheduled for this week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.type = 'vacation' \nAND e.is_active = true \nAND t.start_date <= date('now', '+7 days') \nAND t.end_date >= date('now', 'now') ;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Find out which employees are away on vacation this week.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now', '+7 days') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which employees are out of office today?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all types%')) AND (\"t1\".\"status\" = 'approved'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Give me the details of employees that are on vacation this week.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.* FROM employees e\nJOIN time_off t ON t.employee_id = e.id\nWHERE t.status = 'approved'\nAND t.start_date <= date('now', '+7 days')\nAND t.end_date >= date('now')\nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is on vacation right now among the employees?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please provide the names of employees on vacation during the current week.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now', '+7 days') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which staff members are enjoying vacation time this week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND LOWER(t.policy_type) = LOWER('annual leave');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Could you tell me which employees are taking vacation this week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now', '+7 days') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show me the employees who are currently on vacation this week.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now', '+7 days') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the active employees that are on vacation this week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now', '+7 days') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List the employees who are off on vacation this week.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND LOWER(t.policy_type) = LOWER('annual leave') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Identify the employees that have vacation leave this week.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now', '+7 days') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the individuals from our team that are on vacation this week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND LOWER(t.policy_type) = LOWER('annual leave');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you show the employees with vacation this week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now', '+7 days') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What employees are on vacation during this week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now', '+7 days') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which employees are utilizing their vacation leave this week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.type = 'vacation' \nAND e.is_active = true \nAND t.start_date <= date('now', '+7 days') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is taking vacation leave this week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('annual leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now', '+7 days') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you find out which employees are on their vacation this week?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please identify the employees on vacation for this week.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-05')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-05'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-05')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now', '+7 days') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which employees have taken time off in the upcoming month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now') AND date('now', '+1 month') \nORDER BY t.start_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the employees that have planned vacation for next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('annual leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day') \nORDER BY t.start_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show me the staff members with approved time off for the next month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day')\nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who has planned their time away from work for next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date >= date('now', '+1 month', 'start of month') \nAND t.start_date < date('now', '+2 month', 'start of month')",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List the individuals who have requested time off for next month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day')\nAND t.status = 'approved'\nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which workers have scheduled absences for next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please provide the names of employees taking time off in the next month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-27'))))",
    "sql_agent": "SELECT e.full_name \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.start_date BETWEEN date('now') AND date('now', '+1 month')\nAND t.status = 'approved'\nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is on leave next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day')",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you tell me who is scheduled for leave next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day') \nORDER BY t.start_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who among the employees has requested vacation for the upcoming month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.policy_type = 'annual leave' \nAND t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day')",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can I get a list of those who have booked time off next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which employees are off next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day')",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List the employees with scheduled time off for next month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who has arranged for leave during next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day')",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What employees are taking time off in the next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-03-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-03-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-03-27'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now') AND date('now', '+1 month') \nORDER BY t.start_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who has approved leave for next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%approved%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date >= date('now', '+1 month', 'start of month') \nAND t.start_date < date('now', '+2 month', 'start of month');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is scheduled to be away from work next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day') \nORDER BY t.start_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you provide details on who has time off scheduled for next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.policy_type, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day') \nORDER BY t.start_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who has their time off set for next month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day') \nORDER BY t.start_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List anyone who has requested leave for next month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day')\nAND t.status = 'approved'\nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "I want to see which employees are on sick leave right now.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you provide a list of employees taking sick leave today?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show me all employees who are currently on sick leave today.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now')\nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List the names of employees with sick leave today.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.full_name \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.type = 'sick leave' \nAND e.is_active = true \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Find all employees that are on sick leave as of today.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please list the employees who have sick leave today.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now')\nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the employees absent due to sick leave today?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now')\nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Identify the employees that have time off arranged for next month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-03-01') AND (date(\"t1\".\"start_date\") <= '2025-03-31')) OR ((date(\"t1\".\"end_date\") >= '2025-03-01') AND (date(\"t1\".\"end_date\") <= '2025-03-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-03-01') AND (date(\"t1\".\"end_date\") >= '2025-03-31'))))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '+1 month', 'start of month') AND date('now', '+1 month', 'start of month', '+1 month', '-1 day')",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which employees are out sick today?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now')\nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you tell me about the employees on sick leave today?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('sick leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show all currently active employees who are on sick leave today.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now')\nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please give me the details of employees on sick leave today.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.full_name, e.email, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('sick leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List all active employees with sick leave today.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now')\nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "I need to know which employees are sick today.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now')\nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Identify employees that are on sick leave for today.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now')\nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Provide a list of those employees who are taking sick leave today.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now')\nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What employees are currently on sick leave?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Get me the list of employees who are on sick leave as of today.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show me the employees that are on sick leave for today.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now')\nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you fetch the details of employees currently on sick leave?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.id, e.full_name, e.department, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('sick leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the employees on sick leave today?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you show me the employees with time off requests waiting for approval?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%pending%')) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date, t.policy_type \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status != 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List all employees with time off requests that are still pending.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status != 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is on sick leave today among the employees?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%sick%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('sick leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the employees that currently have pending time off requests?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%pending%')) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status != 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which staff members have outstanding time off requests?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date, t.policy_type \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status != 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Identify employees that have pending requests for time off.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status != 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Give me the names of employees with pending time off requests.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%pending%')) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status != 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What employees have time off requests that haven't been finalized?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status != 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who has not yet received approval for their time off requests?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status != 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which workers have active time off requests that are still pending?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status != 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you tell me which employees are waiting on their time off requests?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%pending%')) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status != 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What employees currently have time off requests that are pending?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'pending'\nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List out the employees with time off requests that are still under review.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'under review'\nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Find the employees that have requests for time off in a pending state.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'pending'\nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who are the active employees with pending time off requests?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "{'error': 'Invalid query'}",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date, t.policy_type \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status != 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show me the employees whose time off requests are in pending status.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'pending'\nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which employees have submitted time off requests that remain unresolved?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status != 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you find out which employees have pending time off applications?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%pending%')) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status != 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Identify the active staff members who have pending time off requests.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%pending%')) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status != 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What active employees have time off requests that are still awaiting a decision?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status != 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please provide the list of employees with time off requests that are not yet approved.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((\"t2\".\"is_active\" = 1) AND (\"t1\".\"status\" = 'pending'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (\"t1\".\"status\" = 'pending'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date, t.status \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you tell me which employees are on annual leave during the Christmas holiday period?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-24') AND (date(\"t1\".\"start_date\") <= '2025-12-26')) OR ((date(\"t1\".\"end_date\") >= '2025-12-24') AND (date(\"t1\".\"end_date\") <= '2025-12-26'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-24') AND (date(\"t1\".\"end_date\") >= '2025-12-26')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('2023-12-25')\nAND t.end_date >= date('2023-12-25');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List the employees who will be taking annual leave over Christmas.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-24') AND (date(\"t1\".\"start_date\") <= '2025-12-26')) OR ((date(\"t1\".\"end_date\") >= '2025-12-24') AND (date(\"t1\".\"end_date\") <= '2025-12-26'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-24') AND (date(\"t1\".\"end_date\") >= '2025-12-26')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('2023-12-25') \nAND t.end_date >= date('2023-12-25');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the staff members scheduled for annual leave during the holiday season?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-01') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-01') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-01') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('annual leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('2023-12-31') \nAND t.end_date >= date('2023-12-01') \nORDER BY t.start_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show me the names of people who are on annual leave from December 25 to December 31.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('2023-12-31')\nAND t.end_date >= date('2023-12-25');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which employees have planned annual leave for the Christmas holidays?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-24') AND (date(\"t1\".\"start_date\") <= '2025-12-26')) OR ((date(\"t1\".\"end_date\") >= '2025-12-24') AND (date(\"t1\".\"end_date\") <= '2025-12-26'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-24') AND (date(\"t1\".\"end_date\") >= '2025-12-26')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date BETWEEN date('now', 'start of December') AND date('now', 'end of December');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Find out who is taking time off for annual leave during Christmas.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-25')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-25'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-25')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('2023-12-25')\nAND t.end_date >= date('2023-12-25');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is on vacation for annual leave during the holiday break?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('annual leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now', '+1 month') \nAND t.end_date >= date('now') ;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "I need to know which employees are off on annual leave during the Christmas holidays.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-24') AND (date(\"t1\".\"start_date\") <= '2025-12-26')) OR ((date(\"t1\".\"end_date\") >= '2025-12-24') AND (date(\"t1\".\"end_date\") <= '2025-12-26'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-24') AND (date(\"t1\".\"end_date\") >= '2025-12-26')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('2023-12-25')\nAND t.end_date >= date('2023-12-25');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the individuals on annual leave in the week of Christmas?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-22') AND (date(\"t1\".\"start_date\") <= '2025-12-28')) OR ((date(\"t1\".\"end_date\") >= '2025-12-22') AND (date(\"t1\".\"end_date\") <= '2025-12-28'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-22') AND (date(\"t1\".\"end_date\") >= '2025-12-28')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('2023-12-25')\nAND t.end_date >= date('2023-12-25');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you provide a list of workers who have annual leave during the Christmas period?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-24') AND (date(\"t1\".\"start_date\") <= '2025-12-26')) OR ((date(\"t1\".\"end_date\") >= '2025-12-24') AND (date(\"t1\".\"end_date\") <= '2025-12-26'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-24') AND (date(\"t1\".\"end_date\") >= '2025-12-26')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('annual leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND (t.start_date BETWEEN date('now', '2023-12-24') AND date('now', '2023-12-26') \nOR t.end_date BETWEEN date('now', '2023-12-24') AND date('now', '2023-12-26')) \nORDER BY t.start_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What employees are using annual leave during the Christmas holidays?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-24') AND (date(\"t1\".\"start_date\") <= '2025-12-26')) OR ((date(\"t1\".\"end_date\") >= '2025-12-24') AND (date(\"t1\".\"end_date\") <= '2025-12-26'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-24') AND (date(\"t1\".\"end_date\") >= '2025-12-26')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('2023-12-25') \nAND t.end_date >= date('2023-12-25');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Identify the employees taking annual leave around the Christmas holidays.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-24') AND (date(\"t1\".\"start_date\") <= '2025-12-26')) OR ((date(\"t1\".\"end_date\") >= '2025-12-24') AND (date(\"t1\".\"end_date\") <= '2025-12-26'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-24') AND (date(\"t1\".\"end_date\") >= '2025-12-26')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND (t.start_date BETWEEN date('now', '2023-12-24') AND date('2023-12-31') \nOR t.end_date BETWEEN date('2023-12-24') AND date('2023-12-31')) \nORDER BY t.start_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List all employees who have requested annual leave over the Christmas break.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-24') AND (date(\"t1\".\"start_date\") <= '2025-12-26')) OR ((date(\"t1\".\"end_date\") >= '2025-12-24') AND (date(\"t1\".\"end_date\") <= '2025-12-26'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-24') AND (date(\"t1\".\"end_date\") >= '2025-12-26')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date BETWEEN date('now', 'start of December') AND date('now', 'start of January', '+1 month');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is taking annual leave during the festive season this year?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-01') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-01') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-01') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date BETWEEN date('2023-12-01') AND date('2023-12-31')",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is scheduled for time off due to annual leave during the Christmas time frame?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-24') AND (date(\"t1\".\"start_date\") <= '2025-12-26')) OR ((date(\"t1\".\"end_date\") >= '2025-12-24') AND (date(\"t1\".\"end_date\") <= '2025-12-26'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-24') AND (date(\"t1\".\"end_date\") >= '2025-12-26')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('annual leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND (t.start_date BETWEEN '2023-12-24' AND '2023-12-31' OR t.end_date BETWEEN '2023-12-24' AND '2023-12-31') \nORDER BY t.start_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who will be away on annual leave during the holidays?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now', '+1 month')\nAND t.end_date >= date('now')",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you check which employees are off for annual leave during the Christmas season?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-24') AND (date(\"t1\".\"start_date\") <= '2025-12-26')) OR ((date(\"t1\".\"end_date\") >= '2025-12-24') AND (date(\"t1\".\"end_date\") <= '2025-12-26'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-24') AND (date(\"t1\".\"end_date\") >= '2025-12-26')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('annual leave') \nAND t.status = 'approved' \nAND e.is_active = true \nAND ( (t.start_date BETWEEN date('now', '2023-12-24') AND date('now', '2023-12-26')) \nOR (t.end_date BETWEEN date('now', '2023-12-24') AND date('now', '2023-12-26')) \nOR (t.start_date <= date('now', '2023-12-24') AND t.end_date >= date('now', '2023-12-26')) ) \nORDER BY t.start_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show me all employees who took birthday leave during the last month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-01-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('birthday day off')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date BETWEEN date('now', '-1 month') AND date('now')",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you provide a list of employees that used birthday leave last month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('birthday day off') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '-1 month', 'start of month') AND date('now', '-1 month', 'start of month', '+1 month', '-1 day') \nORDER BY t.start_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Get me the details of employees on annual leave for the Christmas break.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-26')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-26'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-26')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.* FROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('2023-12-25')\nAND t.end_date >= date('2023-12-25');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who is taking annual leave from December 25 to December 31?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('2023-12-31')\nAND t.end_date >= date('2023-12-25');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "I want to see the names of all employees who had birthday leave in the previous month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('birthday day off') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '-1 month', 'start of month') AND date('now', '-1 month', 'start of month', '+1 month', '-1 day') \nORDER BY e.full_name;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Which employees availed themselves of birthday leave in the past month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-01-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('birthday day off')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date BETWEEN date('now', '-1 month') AND date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please list all staff members who took birthday leave last month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('birthday day off')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date BETWEEN date('now', '-1 month', 'start of month') AND date('now', '-1 month', 'start of month', '+1 month', '-1 day')",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the employees that took birthday leave in the last month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-01-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('birthday day off') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '-1 month') AND date('now')",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Get me the details of employees who were on birthday leave last month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.* \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('birthday day off') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '-1 month', 'start of month') AND date('now', '-1 month', 'end of month')",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List the employees that enjoyed birthday leave during the preceding month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('birthday day off') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '-1 month', 'start of month') AND date('now', '-1 month', 'end of month') \nORDER BY t.start_date;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you find out which employees took birthday leave last month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('birthday day off')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date BETWEEN date('now', '-1 month', 'start of month') AND date('now', '-1 month', 'end of month')",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "I\u2019d like to see the list of employees on annual leave during the Christmas holiday.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-31')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"start_date\") > date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-12-25') AND (date(\"t1\".\"start_date\") <= '2025-12-25')) OR ((date(\"t1\".\"end_date\") >= '2025-12-25') AND (date(\"t1\".\"end_date\") <= '2025-12-25'))) OR ((date(\"t1\".\"start_date\") <= '2025-12-25') AND (date(\"t1\".\"end_date\") >= '2025-12-25')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%annual%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('annual leave')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('2023-12-25')\nAND t.end_date >= date('2023-12-25');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "I need a report of employees that took birthday leave in the last month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-01-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('birthday day off') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '-1 month') AND date('now') \nORDER BY t.start_date DESC;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Identify the employees who utilized birthday leave last month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('birthday day off') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '-1 month', 'start of month') AND date('now', '-1 month', 'end of month')",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Provide a list of those employees who took birthday leave last month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('birthday day off') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '-1 month', 'start of month') AND date('now', '-1 month', 'end of month')",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who took birthday leave during the last month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-01-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('birthday day off') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '-1 month') AND date('now') \nORDER BY t.start_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Give me the roster of employees who had birthday leave last month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('birthday day off') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '-1 month', 'start of month') AND date('now', '-1 month', 'end of month')",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "List out all employees that were on birthday leave last month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('birthday day off') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '-1 month', 'start of month') AND date('now', '-1 month', 'end of month');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please show the employees who took birthday leave last month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('birthday day off')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date BETWEEN date('now', '-1 month', 'start of month') AND date('now', '-1 month', 'start of month', '+1 month', '-1 day')",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What are the names of employees who took birthday leave last month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('birthday day off') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '-1 month', 'start of month') AND date('now', '-1 month', 'end of month')",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the staff members that availed birthday leave last month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(t.policy_type) = LOWER('birthday day off')\nAND t.status = 'approved'\nAND e.is_active = true\nAND t.start_date BETWEEN date('now', '-1 month', 'start of month') AND date('now', '-1 month', 'start of month', '+1 month', '-1 day')",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show all active employees who had birthday leave in the previous month.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%')) AND (\"t1\".\"status\" = 'approved'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('birthday day off') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '-1 month', 'start of month') AND date('now', '-1 month', 'start of month', '+1 month', '-1 day') \nORDER BY t.start_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What is the total number of individuals who are out of the office today across every department?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(DISTINCT t.employee_id) AS total_out_of_office\nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved'\nAND e.is_active = true\nAND t.start_date <= date('now')\nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you tell me which employees took birthday leave in the last month?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-01') AND (date(\"t1\".\"start_date\") <= '2025-01-31')) OR ((date(\"t1\".\"end_date\") >= '2025-01-01') AND (date(\"t1\".\"end_date\") <= '2025-01-31'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-01') AND (date(\"t1\".\"end_date\") >= '2025-01-31')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND (date(\"t1\".\"end_date\") < date('now'))) AND ((((date(\"t1\".\"start_date\") >= '2025-01-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-01-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-01-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%birthday%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE LOWER(t.policy_type) = LOWER('birthday day off') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date BETWEEN date('now', '-1 month') AND date('now') \nORDER BY t.start_date;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you tell me the count of employees currently out of office today in all departments?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT LOWER(e.department) AS department, COUNT(*) AS employee_count \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true \nGROUP BY LOWER(e.department);",
    "pydantic_agent_correct": true,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "How many staff members are on leave today in all departments?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as staff_on_leave_today \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please provide the number of people taking time off today from all departments.",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as employee_count \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can I get the count of all employees out of the office today?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as employee_count \nFROM employees e \nJOIN time_off t ON e.id = t.employee_id \nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "How many active employees are out of the office today?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%active employees%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as active_employees_out_of_office\nFROM employees e\nJOIN time_off t ON e.id = t.employee_id\nWHERE e.is_active = true\nAND t.status = 'approved'\nAND t.start_date <= date('now')\nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "How many employees have taken leave today across different departments?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"department\", COUNT(DISTINCT \"t2\".\"id\") AS \"total\" FROM \"time_off\" AS \"t2\" INNER JOIN \"employees\" AS \"t1\" ON (\"t2\".\"employee_id\" = \"t1\".\"id\") WHERE (((((\"t1\".\"is_active\" = 1) AND ((date(\"t2\".\"start_date\") <= date('now')) AND (date(\"t2\".\"end_date\") >= date('now')))) AND ((((date(\"t2\".\"start_date\") >= '2025-02-27') AND (date(\"t2\".\"start_date\") <= '2025-02-27')) OR ((date(\"t2\".\"end_date\") >= '2025-02-27') AND (date(\"t2\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t2\".\"start_date\") <= '2025-02-27') AND (date(\"t2\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t2\".\"policy_type\") LIKE '%leave%')) AND (\"t2\".\"status\" = 'approved')) GROUP BY \"t1\".\"department\" ORDER BY COUNT(DISTINCT \"t2\".\"id\")",
    "sql_agent": "SELECT LOWER(department) AS department, COUNT(*) AS employee_count \nFROM employees e \nJOIN time_off t ON e.id = t.employee_id \nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true \nGROUP BY LOWER(department);",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please tell me how many people are away from the office today in all departments?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all%')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as away_count \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you find out how many employees are absent today across all divisions?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as absent_employee_count \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What\u2019s the tally of staff currently away from the office today?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as away_count \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Could you find out how many people are on vacation today across all departments?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"id\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%vacation%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"id\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "sql_agent": "SELECT COUNT(*) as vacation_count \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "How many employees are not in the office today?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all absences%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as not_in_office_count FROM employees WHERE is_active = true AND location != 'office';",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What\u2019s the total amount of people out of office today?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as total_out_of_office \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "What\u2019s the total number of workers currently out of the office today?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as total_out_of_office \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "How many people are taking a day off today in all sectors?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%day off%')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as total_people_off_today \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Could you let me know how many employees are out of the office today across all sections?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"full_name\", COUNT(DISTINCT \"t2\".\"id\") AS \"total\" FROM \"time_off\" AS \"t2\" INNER JOIN \"employees\" AS \"t1\" ON (\"t2\".\"employee_id\" = \"t1\".\"id\") WHERE (((((\"t1\".\"is_active\" = 1) AND ((date(\"t2\".\"start_date\") <= date('now')) AND (date(\"t2\".\"end_date\") >= date('now')))) AND ((((date(\"t2\".\"start_date\") >= '2025-02-27') AND (date(\"t2\".\"start_date\") <= '2025-02-27')) OR ((date(\"t2\".\"end_date\") >= '2025-02-27') AND (date(\"t2\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t2\".\"start_date\") <= '2025-02-27') AND (date(\"t2\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t2\".\"policy_type\") LIKE '%all%')) AND (\"t2\".\"status\" = 'approved')) GROUP BY \"t1\".\"full_name\" ORDER BY COUNT(DISTINCT \"t2\".\"id\") DESC",
    "sql_agent": "SELECT COUNT(DISTINCT t.employee_id) AS out_of_office_count \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you check how many employees are off work today across all departments?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as employee_count \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Please count the number of employees out of office today across all areas.",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(DISTINCT e.id) AS out_of_office_count \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "How many individuals are currently out of the office today in total?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(*) as total_out_of_office \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Who are the employees in Design that are presently on leave?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(e.department) = LOWER('Design') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Show me the employees from the Design team that are on leave at the moment.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE e.is_active = true \nAND LOWER(e.department) = LOWER('Design') \nAND t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What is the number of employees on leave today across all departments?",
    "original_sql": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%out of office%')) AND (\"t1\".\"status\" = 'approved')) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\") DESC",
    "pydantic_agent": "SELECT \"t1\".\"policy_type\", COUNT(DISTINCT \"t1\".\"id\") AS \"total\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) GROUP BY \"t1\".\"policy_type\" ORDER BY COUNT(DISTINCT \"t1\".\"id\")",
    "sql_agent": "SELECT COUNT(DISTINCT t.employee_id) AS employees_on_leave\nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.start_date <= date('now')\nAND t.end_date >= date('now')\nAND t.status = 'approved'\nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you tell me which employees from the Design department are on leave right now?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND LOWER(e.department) = LOWER('Design') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "List the employees from the Design department that are on leave now.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND LOWER(e.department) = LOWER('Design') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What Design team staff are currently away on leave?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND e.is_active = true \nAND LOWER(e.department) = LOWER('Design') \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which employees from the Design team are out on leave currently?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE e.is_active = true \nAND t.status = 'approved' \nAND LOWER(e.department) = LOWER('Design') \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Who in the Design department is currently on leave?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t \nJOIN employees e ON t.employee_id = e.id \nWHERE t.status = 'approved' \nAND e.is_active = true \nAND LOWER(e.department) = LOWER('Design') \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I\u2019d like to know which members of the Design team are currently taking time off.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%all%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE e.is_active = true \nAND t.status = 'approved' \nAND LOWER(e.department) = LOWER('Design') \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Can you find the Design team members who are on leave right now?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND LOWER(e.department) = LOWER('Design') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "I want to know which Design employees are on leave at this time.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(e.department) = LOWER('Design') \nAND t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Identify the employees from Design that are currently on leave.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(e.department) = LOWER('Design') \nAND t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Which members of the Design team are taking leave right now?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND LOWER(e.department) = LOWER('Design') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What employees from the Design division are on leave as of now?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE e.is_active = true \nAND t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND LOWER(e.department) = LOWER('Design');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Can you check if there are any Design team members currently on leave?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE e.is_active = true \nAND t.status = 'approved' \nAND LOWER(e.department) = LOWER('Design') \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Please provide the names of Design employees who are on leave at present.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name \nFROM employees e \nJOIN time_off t ON t.employee_id = e.id \nWHERE LOWER(e.department) = LOWER('Design') \nAND t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Are there any employees from the Design team who are absent on leave at the moment?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(e.department) = LOWER('Design') \nAND t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Could you list the Design team employees currently on leave?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(e.department) = LOWER('Design') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Find out which employees from Design are out on leave right now.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(e.department) = LOWER('Design') \nAND t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": true,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "What are the names of the employees from the Design department that are on leave?",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name \nFROM employees e \nJOIN time_off t ON t.employee_id = e.id \nWHERE LOWER(e.department) = LOWER('Design') \nAND t.status = 'approved' \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": false,
    "error": null
  },
  {
    "question": "Show me which Design team members have approved leave right now.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%approved%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(e.department) = LOWER('Design') \nAND t.status = 'approved' \nAND e.is_active = true \nAND t.start_date <= date('now') \nAND t.end_date >= date('now');",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  },
  {
    "question": "Give me a list of employees from Design who are on leave currently.",
    "original_sql": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE ((((((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND ((((date(\"t1\".\"start_date\") >= '2025-02-27') AND (date(\"t1\".\"start_date\") <= '2025-02-27')) OR ((date(\"t1\".\"end_date\") >= '2025-02-27') AND (date(\"t1\".\"end_date\") <= '2025-02-27'))) OR ((date(\"t1\".\"start_date\") <= '2025-02-27') AND (date(\"t1\".\"end_date\") >= '2025-02-27')))) AND (LOWER(\"t1\".\"policy_type\") LIKE '%leave%')) AND (\"t1\".\"status\" = 'approved')) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "pydantic_agent": "SELECT \"t1\".\"id\", \"t1\".\"employee_id\", \"t1\".\"policy_type\", \"t1\".\"start_date\", \"t1\".\"end_date\", \"t1\".\"type\", \"t1\".\"status\", \"t1\".\"created_at\", \"t1\".\"updated_at\", \"t2\".\"id\", \"t2\".\"updated_at\", \"t2\".\"full_name\", \"t2\".\"nationality\", \"t2\".\"department\", \"t2\".\"is_manager\", \"t2\".\"location\", \"t2\".\"linkedin\", \"t2\".\"twitter_x\", \"t2\".\"facebook\", \"t2\".\"email\", \"t2\".\"is_active\", \"t2\".\"reports_to_id\", \"t2\".\"birth_date\", \"t2\".\"client\" FROM \"time_off\" AS \"t1\" INNER JOIN \"employees\" AS \"t2\" ON (\"t1\".\"employee_id\" = \"t2\".\"id\") WHERE (((\"t2\".\"is_active\" = 1) AND ((date(\"t1\".\"start_date\") <= date('now')) AND (date(\"t1\".\"end_date\") >= date('now')))) AND (LOWER(\"t2\".\"department\") LIKE '%design%'))",
    "sql_agent": "SELECT e.full_name, t.start_date, t.end_date \nFROM time_off t\nJOIN employees e ON t.employee_id = e.id\nWHERE LOWER(e.department) = LOWER('Design') \nAND t.status = 'approved' \nAND t.start_date <= date('now') \nAND t.end_date >= date('now') \nAND e.is_active = true;",
    "pydantic_agent_correct": false,
    "sql_agent_correct": true,
    "error": null
  }
]